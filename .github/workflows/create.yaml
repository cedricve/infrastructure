name: Create Deployment Environment
on:
  workflow_dispatch:
    inputs:
      project_name:
        description: "Project name"
        required: true
        default: "project-a"
      environment_name:
        description: "Environment name"
        required: true
        default: "dev"
jobs:
  # This will lookup a GitHub environment through the GitHub API
  lookup-environment:
    name: Get GitHub Environments
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.TOKEN }}
      OWNER: ${{ github.repository_owner }}
      REPO: ${{ github.event.repository.name }}
      PROJECT_NAME: ${{ github.event.inputs.project_name }}
      ENVIRONMENT_NAME: ${{ github.event.inputs.environment_name }}
      FULL_NAME: ${{ github.event.inputs.project_name }}-${{ github.event.inputs.environment_name }}
    steps:
      - uses: octokit/request-action@v2.x
        id: get_release
        with:
          route: GET /repos/{owner}/{repo}/environments/${{ env.FULL_NAME }}
          owner: ${{ env.OWNER }}
          repo: ${{ env.REPO }}
      - run: "echo Environment found: '${{ steps.get_release.outputs.data }}'"
        if: ${{ success() }}
      - run: "echo Environment could not be found. Request failed with status '${{ steps.get_release.outputs.status }}', proceeding to create."
        if: ${{ failure() }}
  # This will create a GitHub environment through the GitHub API if does not exist
  # Find more information here: https://docs.github.com/en/rest/deployments/environments?apiVersion=2022-11-28#create-or-update-an-environment
  create-environment:
    name: Create GitHub Environment
    needs: lookup-environment
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    env:
      TEAM_REVIEWER_ID: ${{ secrets.TEAM_REVIEWER_ID }}
      GITHUB_TOKEN: ${{ secrets.TOKEN }}
      OWNER: ${{ github.repository_owner }}
      REPO: ${{ github.event.repository.name }}
      PROJECT_NAME: ${{ github.event.inputs.project_name }}
      ENVIRONMENT_NAME: ${{ github.event.inputs.environment_name }}
      FULL_NAME: ${{ github.event.inputs.project_name }}-${{ github.event.inputs.environment_name }}
    steps:
      - uses: octokit/request-action@v2.x
        id: create_environment
        with:
          route: PUT /repos/{owner}/{repo}/environments/${{ env.FULL_NAME }}
          owner: ${{ env.OWNER }}
          repo: ${{ env.REPO }}
          #data: |
          #  {
          #     "prevent_self_review": false,
          #     "deployment_branch_policy": {
          #      "protected_branches": true,
          #       "custom_branch_policies": false,
          #    },
          #  }
          # "reviewers":[{"type":"Team","id": ${{ env.TEAM_REVIEWER_ID }}}]

      - run: "echo Environment created successfully: '${{ steps.get_release.outputs.data }}'"
        if: ${{ success() }}
      - run: "echo Environment could not be created. Request failed with status '${{ steps.get_release.outputs.status }}'"
        if: ${{ failure() }}
  add-secrets:
    name: Add environment variables to environment
    needs: create-environment
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    env:
      GITHUB_TOKEN: ${{ secrets.TOKEN }}
      OWNER: ${{ github.repository_owner }}
      REPO: ${{ github.event.repository.name }}
      PROJECT_NAME: ${{ github.event.inputs.project_name }}
      ENVIRONMENT_NAME: ${{ github.event.inputs.environment_name }}
      FULL_NAME: ${{ github.event.inputs.project_name }}-${{ github.event.inputs.environment_name }}
    steps:
      - uses: octokit/request-action@v2.x
        id: add_project_name
        with:
          route: POST /repos/{owner}/{repo}/environments/${{ env.FULL_NAME }}/variables
          owner: ${{ env.OWNER }}
          repo: ${{ env.REPO }}
          data: |
            {
              "name": "PROJECT_NAME",
              "value": ${{ env.PROJECT_NAME }},
            }
      - run: "echo environment added successfully"
        if: ${{ success() }}
      - run: "echo environment could not be added. Request failed with status '${{ steps.get_release.outputs.status }}'"
        if: ${{ failure() }}
      - uses: octokit/request-action@v2.x
        id: add_environment_name
        with:
          route: POST /repos/{owner}/{repo}/environments/${{ env.FULL_NAME }}/variables
          owner: ${{ env.OWNER }}
          repo: ${{ env.REPO }}
          data: |
            {
              "name": "ENVIRONMENT_NAME",
              "value": ${{ env.ENVIRONMENT_NAME }},
            }
      - run: "echo environment added successfully"
        if: ${{ success() }}
      - run: "echo environment could not be added. Request failed with status '${{ steps.get_release.outputs.status }}'"
        if: ${{ failure() }}
  prepare-configuration-files:
    name: Prepare configuration files, this will create a folder in the "aro-spoke" repository representing PROJECT_NAME/ENVIRONMENT_NAME
    needs: create-environment
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      #GH_TOKEN: ${{ secrets.TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO }}
          ref: "main"
          #token: ${{ env.GH_TOKEN }}
      - name: Create directories
        run: |
          mkdir -p aro-spoke/${{ github.event.inputs.project_name }}/${{ github.event.inputs.environment_name }}
          echo "Directory created: 'aro-spoke/${{ github.event.inputs.project_name }}/${{ github.event.inputs.environment_name }}'"
      - name: Copy default.tfvars to new directory.
        run: |
          cp aro-spoke/default.tfvars aro-spoke/${{ github.event.inputs.project_name }}/${{ github.event.inputs.environment_name }}/terraform.tfvars
          echo "File copied: 'aro-spoke/${{ github.event.inputs.project_name }}/${{ github.event.inputs.environment_name }}/terraform.tfvars'"
      - name: Commit and push changes into a new PR
        run: |
          # ------------------------------
          # Create a new branch for the changes

          echo "Creating a new branch for the changes"
          BRANCH_NAME=feature/create-environment-${{ github.event.inputs.project_name }}-${{ github.event.inputs.environment_name }}
          git checkout -B $BRANCH_NAME
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add aro-spoke/${{ github.event.inputs.project_name }}/${{ github.event.inputs.environment_name }}
          git commit -m "Create environment ${GITHUB_REF} for ${{ env.REPO }}"
          git push --set-upstream origin $BRANCH_NAME

          # ------------------------------
          # Check if the PR already exists
          
          echo "Checking if pull request already exists"
          PR_LIST=$(gh pr list --state open --base main --head $BRANCH_NAME --repo ${{ env.REPO }})
          PR_EXISTS=$(echo "$PR_LIST" | wc -c)
          if [ $PR_EXISTS -gt 1 ]; then
            echo "Pull request already exists"
            exit 0
          fi

          # -------------------------
          # Create a new pull request

          echo "Creating pull request on repository"
          gh pr create --title "Creating a new environment for project ${{ github.event.inputs.project_name }}" \
            --body "This PR creates a new environment for project `${{ github.event.inputs.project_name }}` with the name `${{ github.event.inputs.environment_name }}`." \
            --base main --head $BRANCH_NAME --repo ${{ env.REPO }}
